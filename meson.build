#Set project with C++14
project('OpenE2140', 'c', 'cpp', default_options : ['c_std=c11', 'cpp_std=c++14'])

#Vars
opene2140_deps = []
opene2140_is_macos = host_machine.system() == 'darwin'
opene2140_is_windows = host_machine.system() == 'windows'

#Load SDL2
sdl2_dep = dependency('sdl2', version : '>=2.0.7')
opene2140_deps += [sdl2_dep]

#Load OpenGL
opengl_dep = dependency('gl')
opene2140_deps += [opengl_dep]

#Load GLEW
glew_dep = dependency('glew')
opene2140_deps += [glew_dep]

#Load GLM
glm_dep = dependency('glm')
opene2140_deps += [glm_dep]

#Load Lua
lua_dep = dependency('lua', version : '>=5.1')
opene2140_deps += [lua_dep]

#Load boost libs
boost_dep = dependency('boost',
    modules: ['system', 'filesystem'],
    version : '>=1.66',
    required : false,
)
if boost_dep.found()
    #Boost needs dl in some OSes like linux
    dl_dep = meson.get_compiler('c').find_library('dl', required : false)
    opene2140_deps += [boost_dep, dl_dep]
endif

#Create configuration
opene2140_cfg = configuration_data()
opene2140_cfg.set('OPENE2140_CONFIG_PLACEHOLDER_H', '"OpenE2140"', description: 'Disables placeholder config')
opene2140_cfg.set('GAME_NAME', '"OpenE2140"', description: 'Game name')
opene2140_cfg.set('GAME_VERSION_MAJOR', 0, description: 'Game version major digit')
opene2140_cfg.set('GAME_VERSION_MINOR', 3, description: 'Game version minor digit')
opene2140_cfg.set('GAME_DUMP_FILE', '"dump.bin"', description: 'File to dump when crashing')
opene2140_cfg.set('GAME_LOG_FILE', '"log.txt"', description: 'File to store log output')
opene2140_cfg.set('DEFAULT_RESOLUTION_WIDTH', 800, description: 'Default resolution width')
opene2140_cfg.set('DEFAULT_RESOLUTION_HEIGHT', 600, description: 'Default resolution height')
opene2140_cfg.set('GAME_ASSETS_DIR', '"assets"', description: 'Directory name containing assets')
opene2140_cfg.set('GAME_ASSET_CONTAINER_NAMES', '{"MIX", "LEVEL", "PIRO"}', description: 'Names of asset containers to load')

#Variable config
opene2140_cfg.set('OPENE2140_USE_BOOST', boost_dep.found() ? 'true' : 'false', description: 'Enables the use of Boost library')
opene2140_cfg.set('OPENE2140_IS_MACOS', opene2140_is_macos ? 'true' : 'false', description: 'True if being building on macos')
opene2140_cfg.set('OPENE2140_IS_WINDOWS', opene2140_is_windows ? 'true' : 'false', description: 'True if being building on windows')

#Save the config to header file
configure_file(output: 'config.h', configuration: opene2140_cfg)

#Set source files
opene2140_src = [
    'src/core/main.cpp',
    'src/core/errorpossible.cpp',
    'src/core/utils.cpp',
    'src/core/luavm.cpp',
    'src/graphics/window.cpp',
    'src/graphics/palette.cpp',
    'src/graphics/image.cpp',
    'src/math/rectangle.cpp',
    'src/math/vector2.cpp',
    'src/io/log.cpp',
    'src/io/file.cpp',
    'src/assets/asset.cpp',
    'src/assets/assetmanager_scan.cpp',
    'src/assets/assetmanager_process.cpp',
    'src/assets/assetmanager.cpp',
    'src/assets/assetimage.cpp',
    'src/assets/assetpalette.cpp',
    'src/gui/eventhandler.cpp',
    'src/core/game.cpp',
    'src/simulation/simulation.cpp',
    'src/graphics/renderer.cpp'
]

#Include headers
opene2140_incs = include_directories(
    #So we can use the config headers generated by build system
    '.',
    #Source headers
    'src',
    #Lib headers
    'lib/spdlog/include',
    'lib/stb',
)

#Include extra files
if opene2140_is_macos
  install_data('Info.plist', install_dir: 'Contents')
endif

#Create executable, set definitions and link it
opene2140_exe = executable(
    'opene2140',
    opene2140_src,
    include_directories: opene2140_incs,
    dependencies: opene2140_deps,
    install: true,
)
